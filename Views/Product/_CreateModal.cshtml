@{
    ViewData["Title"] = "Add Measurement";
}

<div>
    <div class="page-info m-t-30">    
        <div>    
            <div>
                <label class="m-l-15">Add Measurement<span></span></label>
            </div>
            <div>
                <button id="back-to-index" class="main-btn main-btn-primary h-30px w-150px m-l-15 m-r-20" type="submit">
                    <img src="@Url.Content("~/assets/icon/arrow_back.png")" class="w-18px h-18px" alt="Arrow Back Logo"/> 
                    <span>Back</span>
                </button>
            </div>
        </div>
        <div>    
            <label></label>
        </div>
    </div>

    <div class="page-form m-t-30">
        <div>
            <div>
                <label>Category</label>
                <select id="select-category">
                    <option selected="selected" disabled="disabled">Select Category</option>
                </select>
            </div>
            <div>
                <label>Measurement</label>
                <select id="select-measurement">
                    <option selected="selected" disabled="disabled">Select Measurement</option>
                </select>
            </div>
            <div>
                <label>Name</label>
                <input id="textfield-name" type="text" class="main-textfield"/>
            </div>
            <div>
                <label>Code</label>
                <input id="textfield-code" type="text" class="main-textfield"/>
            </div>
            <div>
                <label>Description</label>
                <input id="textfield-description" type="text" class="main-textfield"/>
            </div>
            <div>
                <label>Status</label>
                <select id="textfield-status">
                    <option selected="selected" value="true">Active</option>
                    <option value="false">Inactive</option>
                </select>
            </div>
        </div>
        
        <div>
            <div>
                <button id="handle-save" type="submit">
                    <span>Save</span>
                </button>
                <button id="handle-cancel" type="submit">
                    <span>Cancel</span>
                </button>
            </div>
        </div>

    </div>
    
    <script>
        $(document).ready(function() {
            const reload = $('div[id$=main-reloading]');
            const mainPartial = $('#product-partial');
            const database = firebase.database();
            const categorySelect = $('#select-category');
            const measurementSelect = $('#select-measurement');
            const textFieldName = $('#textfield-name');
            const textFieldCode = $('#textfield-code');
            const textFieldDescription = $('#textfield-description');
            const textFieldStatus = $('#textfield-status');
            
            $.getJSON('@Url.Action("CompletionCategories", "Home")', function(res) {
                reload.show();
                categorySelect.empty();
                categorySelect.append('<option selected=selected disabled=disabled>Select Category</option>');         
                $.each(res, function(index, data) {
                    // console.log(data);
                    categorySelect.append('<option value="' + data['id'] + '">' + data['name'] + '</option>');
                });
                reload.hide();
            });
            $.getJSON('@Url.Action("CompletionMeasurements", "Home")', function(res) {
                reload.show();
                measurementSelect.empty();
                measurementSelect.append('<option selected=selected disabled=disabled>Select Measurement</option>');         
                $.each(res, function(index, data) {
                    // console.log(data);
                    measurementSelect.append('<option value="' + data['id'] + '">' + data['name'] + '</option>');
                });
                reload.hide();
            });
            
            $('#back-to-index').click(function() {
                back();
            });
            
            $('#handle-cancel').click(function() {
                back();
            });
            
            $('#handle-save').click(function() {
                save();
            });
                
            function back() {
                reload.show();  
                $.ajax({
                    type: 'GET',
                    url: `@Url.Action("List", "Product")`,
                    cache: true
                }).done(function(res) { 
                    mainPartial.empty().append(res);
                    reload.hide();
                }).fail(function(a, b, c) {
                    console.log('It is error');
                    console.log(c);
                });
            }
            
            function save() {
                const data = database.ref().child('products');
                data.on('value', function(snapshot) {
                    // console.log(snapshot.numChildren());
                    // for(let i = 0; i < snapshot.numChildren(); i++) {
                    //     console.log(snapshot.val());
                    // } 
                    
                    // for (let i in snapshot.val()) {
                    //     console.log(i.val());
                    //     console.log(i.key);
                    // }
                    let count = 0;
                    let allowLoop = true;
                    snapshot.forEach((child) => {
                        count += 1;
                        if (child.val()['Name'].toLowerCase().trimEnd() === textFieldName.val().toLowerCase().trimEnd() && allowLoop) {
                            bootbox.alert("Product's Name already exists, please input another name!!").find('.modal-content').css({
                               'margin-top': function (){
                                   const w = $( window ).height();
                                   const b = $(".modal-dialog").height();
                                   const h = (w - b) / 2;
                                   return h + "px";
                               }
                            });
                            return false;
                        } else if (child.val()['Code'].toLowerCase().trimEnd() ===  textFieldCode.val().toLowerCase().trimEnd() && allowLoop) {
                            bootbox.alert("Product's Code already exists, please input another code!!").find('.modal-content').css({
                               'margin-top': function (){
                                   const w = $( window ).height();
                                   const b = $(".modal-dialog").height();
                                   const h = (w - b) / 2;
                                   return h + "px";
                               }
                            });
                            return false;
                        } else if (count === snapshot.numChildren()) {
                            $.get(`@Url.Action("CurrentDateTime", "Home")`).done(function(res) {
                                allowLoop = false;
                                const userKey = database.ref().child('products').push().key;
                                const data = {Id: userKey, CategoryId: categorySelect.val(), MeasurementId: measurementSelect.val(), Name: textFieldName.val().trimEnd(), Code: textFieldCode.val().trimEnd(), Description: textFieldDescription.val().trimEnd(), IsActive: textFieldStatus.val() === 'true', CreatedAt: res['dateTime'], CreatedBy: 'Admin'};
                                database.ref().child('products').child(userKey).set(data);
                                back();
                                return false;
                            }).fail(function(a, b, c) {
                                console.log('It is error');
                                console.log(c);
                            });
                        }
                    });
                });
            }
            
        });
    </script>
</div>